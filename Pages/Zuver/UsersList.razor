
@inherits UsersListBase
@inject NotificationService NS
@using DashBoard.Modelos

<div class="form-grup row">
    <div class="col-sm-9">
        <div class="nav-item px-3">

        </div>
    </div>

    <div class="col-sm-3">
        <div class="nav-item px-3">


        </div>
    </div>
</div>

@if (ShowAdd)
{
    <div class="form-grup row">
        <div class="col-sm-9">
            
            <UserAdd ReadUsersAll="UsersAllRead" ReadOrgsAll="LeerOrgAll"
                     LasOrgs="LasOrgs" LosUsers="LosUsuarios"
                     TipoOrgs="TipoOrgs" NivelesEdit="NivelesEdit" />
     
        </div>
    </div>
}

@if (LosUsersTmp != null )
{
    <RadzenDataGrid @ref="UserGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single"
                    Data="@LosUsersTmp" TItem="Z110_User"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">
        <HeaderTemplate>
            @if (ElUser.Nivel > 3)
            {
                <RadzenButton Icon="add" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Info" Click="ShowAddForm">
                    @txtShowAdd
                </RadzenButton>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="UsersAllRead">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <Columns>
            <RadzenDataGridColumn TItem="Z110_User" Title="Id"
                                  Filterable="false" Width="40px">
                <Template Context="datos">
                    @(LosUsersTmp.IndexOf(datos) + 1)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Property="OldEmail" Title="Email" Filterable="true"
                                  Width="200px" />
                
            <RadzenDataGridColumn TItem="Z110_User" Title="Nombre" Filterable="true" Width="250px">
                <Template Context="datos">
                    <div style="white-space:pre-wrap">
                        @datos.Nombre @datos.Paterno @datos.Materno
                    </div>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Nombre" @bind-Value="datos.Nombre" Style="width: 90%" /><br>
                    <RadzenRequiredValidator Component="Nombre" Text="El Nombre es Obligatorio." />
                    <RadzenTextBox Name="Paterno" @bind-Value="datos.Paterno" Style="width: 90%" /><br>
                    <RadzenRequiredValidator Component="Paterno" Text="El apellido paterno es Obligatorio." />
                    <RadzenTextBox Name="Materno" @bind-Value="datos.Materno" Style="width: 90%" /><br>
                    
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Property="Nivel" Title="Nivel"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <p style="white-space:pre-wrap; line-height: initial">
                        @if (NivelesEdit.Any(x=>x.Key == datos.Nivel))
                        {
                            @NivelesEdit.FirstOrDefault(x => x.Key == datos.Nivel).Value;
                        }
                        else
                        {
                            <label>No hay datos del nivel</label>
                        }
                    </p>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Nivel" Data=NivelesTemp @bind-Value=@datos.Nivel
                                    ValueProperty="Key" TextProperty="Value" AllowClear="true"
                                    Style="width: 90%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Title="Organizacion"
                                  Filterable="true" Resizable="true" Width="250px">
                <Template Context="datos">
                    @if (LasOrgs.Any(x=>x.OrgId == datos.OrgId))
                    {
                        <RadzenLabel>
                            @LasOrgs.FirstOrDefault(x => x.OrgId == datos.OrgId)!.Comercial
                        </RadzenLabel>
                    }
                    else
                    {
                        <RadzenLabel>Sin Empresa </RadzenLabel>
                    }
                </Template>
                <EditTemplate Context="datos">
                    @if (ElUser.Nivel > 5)
                    {
                        <RadzenDropDown Name="EmpresaId" Data=LasEmp @bind-Value=@datos.OrgId
                                        ValueProperty="OrgId" TextProperty="Comercial" AllowClear="true"
                                        Style="width: 90%;" />
                    }
                    else
                    {
                        @if (LasOrgs.Any(x => x.OrgId == datos.OrgId))
                        {
                            <RadzenLabel>
                                @LasOrgs.FirstOrDefault(x => x.OrgId == datos.OrgId)!.Comercial
                            </RadzenLabel>
                        }
                    }
                </EditTemplate>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (!(datos.OldEmail == Constantes.DeMail01 ||
                           datos.OldEmail == Constantes.DeMailPublico))
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />
                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }
                    @if (datos.Estado == 2)
                    {
                        <RadzenLabel>Correo sin Confirmar!</RadzenLabel>
                    }

                </Template>

                <EditTemplate Context="datos">
                    @if (datos.Estado != 3)
                    {
                        <RadzenLabel>Borrar este registro?</RadzenLabel>
                        <RadzenSelectBar @bind-Value=@datos.Status TValue="bool">
                            <Items>
                                <RadzenSelectBarItem Text="No" Value="true" />
                                <RadzenSelectBarItem Text="Si" Value="false" />
                            </Items>
                        </RadzenSelectBar>

                    }
                    <label>Actualizar</label>
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />

                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        
    </div>
}

@code {
    void ShowAddForm()
    {
        ShowAdd = !ShowAdd;
        txtShowAdd = !ShowAdd ? "Nuevo Usuario" : "Ocultar Formato";
    }

    void Cancelar()
    {
        //OrgNew = new();
    }

    Z110_User UserToInsert = new();

    async Task EditRow(Z110_User user)
    {

        await UserGrid!.EditRow(user);
        Editando = !Editando;
    }
    async void OnUpdateRow(Z110_User user)
    {
        try
        {
            if (user == UserToInsert) UserToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z110_User> resultado = await Servicio(ServiciosTipos.Update, user);
            string txt = $"{user.Materno}";
            txt += LasOrgs.Any(x => x.OrgId == user.OrgId) ?
                        $"Empresa: {LasOrgs.FirstOrDefault(x => x.OrgId == user.OrgId)!.Comercial}"
                        : "";

            txt += NivelesEdit.Any(x => x.Key == user.Nivel) ?
                        $"Nivel {NivelesEdit.FirstOrDefault(x => x.Key == user.Nivel)}" : "";

            txt += $" Estado:{user.Estado} Estaus:{user.Status}";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info de {user.Nombre} {user.Paterno}", 0));
                txt = $"{TBita}, Se actualizo un registro de {user.Nombre} {user.Paterno} " + txt;
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                ShowNotification(ElMsn("Error", "Error",
                    $"Error No Se actualizo la info de {user.Nombre} {user.Paterno}", 0));
                txt = $"{TBita}, No se actualizo un registro de {user.Nombre} {user.Paterno} empresa {user.OrgId} " + txt;
                foreach (var e in resultado.MsnError)
                {
                    txt += e;
                }
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogAll(logTemp);
            }
            //await UserGrid!.Reload();
        }
        catch (Exception ex)
        {
            string txt = $"Error al actualizar los datos de un usuario {ex}";
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
            await LogAll(logTemp);
        }

    }

    async Task SaveRow(Z110_User user)
    {
        await UserGrid!.UpdateRow(user);
    }
    void CancelEdit(Z110_User user)
    {
        if (user == UserToInsert) UserToInsert = null!;
        Editando = !Editando;
        UserGrid!.CancelEditRow(user);
    }
    async Task InsertRow()
    {
        UserToInsert = new Z110_User();

        UserToInsert.Estado = 3;
        Editando = !Editando;
        await UserGrid!.InsertRow(UserToInsert);

    }
    async void OnCreateRow(Z110_User user)
    {
        // No hay insert usuarios
    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}

