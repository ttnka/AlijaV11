@inherits ZConfiguracionBase
@inject NotificationService NS
@using DashBoard.Modelos



@if (LosConfigs != null && !Leyendo)
{
    <RadzenDataGrid @ref="ZconfigGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosConfigs" TItem="ZConfig"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4 && EmpresaActiva.OrgId.Length > 30)
            {
                <RadzenButton Icon="plus" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Info" Click="InsertRow">
                    Nueva Configuracion
                </RadzenButton>
            }
            else if (EmpresaActiva.OrgId.Length < 30)
            {
                <RadzenLabel>Es necesario que seleciones una empresa activa en Informacion>Empresa Activa</RadzenLabel>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="LeerLosConf">
                Actualizar
            </RadzenButton>
            <RadzenLabel>Los Grupos se llenan "GRUPO nombre y Tipo = Titulo/ElementoS, Titulo= etiqueta"</RadzenLabel>
        </HeaderTemplate>

        
        <Columns>

            <RadzenDataGridColumn TItem="ZConfig" Title="Grupo" Property="Grupo"
                                  Filterable="true" Width="150px">
                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @datos.Grupo
                        </RadzenLabel>
                    </div>
                </Template>
                <EditTemplate Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            <RadzenTextBox Name="Grupo" @bind-Value="datos.Grupo"
                                           Placeholder="Grupo" Style="width:100%;" MaxLength="25" />
                        </RadzenLabel>
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Tipo" Property="Tipo"
                                  Filterable="true" Width="150px">
                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @datos.Tipo
                        </RadzenLabel>
                    </div>
                </Template>
                <EditTemplate Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            <RadzenTextBox Name="Tipo" @bind-Value="datos.Tipo"
                                           Placeholder="Tipo" Style="width:100%;" MaxLength="25" />
                        </RadzenLabel>
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Titulo" Property="Titulo"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Titulo
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Titulo" @bind-Value="datos.Titulo"
                                   Placeholder="Titulo" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Texto" Property="Txt"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Txt
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Txt" @bind-Value="datos.Txt"
                                   Placeholder="Texto o descripcion" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Entero" Property="Entero"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Entero
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenNumeric Name="Entero" @bind-Value="datos.Entero"
                                   Style="width:100%;" ShowUpDown="false" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Decimal" Property="Decimal"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Decimal
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenNumeric Name="Decimal" @bind-Value="datos.Decimal"
                                   Style="width:100%;" ShowUpDown="false" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Fecha Inicio" Filterable="true" Property="Fecha1"
                                  Width="150px">
                <Template Context="datos">
                    <RadzenLabel>@($"{@MyFunc.FormatoFecha("DD/MMM/AA", datos.Fecha1)}")</RadzenLabel>

                </Template>
                <EditTemplate Context="datos">
                    <RadzenDatePicker Name="Fecha" @bind-Value="datos.Fecha1" ShowTime="true"
                                      DateFormat="dd/MM/yyyy" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Fecha final" Filterable="true" Property="Fecha2"
                                  Width="150px">
                <Template Context="datos">
                    <RadzenLabel>@($"{@MyFunc.FormatoFecha("DD/MMM/AA", datos.Fecha2)}")</RadzenLabel>

                </Template>
                <EditTemplate Context="datos">
                    <RadzenDatePicker Name="Fecha" @bind-Value="datos.Fecha2" ShowTime="true"
                                      DateFormat="dd/MM/yyyy" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ZConfig" Title="Si / No" Property="SiNo"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @if (datos.SiNo)
                        {
                            <RadzenLabel>Si / Positivo</RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel>No / Negativo</RadzenLabel>
                        }

                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenSelectBar @bind-Value=@datos.SiNo TValue="bool">
                        <Items>
                            <RadzenSelectBarItem Text="Si" Value="true" />
                            <RadzenSelectBarItem Text="No" Value="false" />
                        </Items>
                    </RadzenSelectBar>
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="ZConfig" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="200px" Title="Estado">
                <Template Context="datos">
                    @if (ElUser.Nivel > 5 || datos.Estado < 2)

                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado > 0 && datos.Estado < 2 && ElUser.Nivel > 4)
                    {
                        <RadzenLabel>
                            Borrar este registro?
                        </RadzenLabel><br />
                        <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                         Placeholder="Borrar este registro?">
                            <Items>
                                <RadzenSelectBarItem Text="No" Value="true" />
                                <RadzenSelectBarItem Text="Si" Value="false" />
                            </Items>
                        </RadzenSelectBar><br />

                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">

    </div>
}

@code {


    void Cancelar()
    {
        //OrgNew = new();
        ConfigToInsert = new();
    }


    ZConfig ConfigToInsert = new();


    async Task EditRow(ZConfig conf)
    {
        await ZconfigGrid!.EditRow(conf);
        Editando = !Editando;
    }

    async void OnUpdateRow(ZConfig conf)
    {
        try
        {
            if (conf == ConfigToInsert) ConfigToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<ZConfig> resultado = await Servicio(ServiciosTipos.Update, conf);

            string txt = $"Grupo: {conf.Grupo} Tipo: {conf.Tipo}, Titulo: {conf.Titulo}, ";
            txt += $"Texto : {conf.Txt}, Entero: {conf.Entero}, Decimal: {conf.Decimal}";
            txt += $"Fec Inicio: {conf.Fecha1}, Fec final: {conf.Fecha2}, Si o no: {conf.SiNo}";
            txt += conf.Status ? "Estatus: Activo" : "Estatus: Suspendido";
            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info de configuracion {conf.Titulo}", 0));
                txt = $"{TBita}, Se actualizo la info de la configuracion ";
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error No Se actualizo la info de {conf.Titulo}";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 4000));
                txt = $"{TBita}, No se actualizo un registro " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogAll(logTemp);
                await ZconfigGrid!.Reload();
            }
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible actualizar el FOLIO, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogAll(logTemp);
        }
    }

    async Task SaveRow(ZConfig conf)
    {
        await ZconfigGrid!.UpdateRow(conf);
    }

    void CancelEdit(ZConfig conf)
    {
        if (conf == ConfigToInsert) ConfigToInsert = null!;

        Editando = !Editando;
        ZconfigGrid!.CancelEditRow(conf);
    }

    async Task InsertRow()
    {
        ConfigToInsert = new ZConfig();
        ConfigToInsert.Estado = 0;

        Editando = !Editando;
        await ZconfigGrid!.InsertRow(ConfigToInsert);
    }
    async void OnCreateRow(ZConfig conf)
    {
        try
        {
            if (conf == ConfigToInsert) ConfigToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<ZConfig> resultado = await Servicio(ServiciosTipos.Insert, conf);

            string txt = $"Grupo: {conf.Grupo} Tipo: {conf.Tipo}, Titulo: {conf.Titulo}, ";
            txt += $"Texto : {conf.Txt}, Entero: {conf.Entero}, Decimal: {conf.Decimal}";
            txt += $"Fec Inicio: {conf.Fecha1}, Fec final: {conf.Fecha2}, Si o no: {conf.SiNo}";
            txt += conf.Status ? "Estatus: Activo" : "Estatus: Suspendido";


            if (resultado.Exito)
            {
                ShowNotification(ElMsn("Exito", "Nuevo Folio",
                    $"Se creo un nuevo registro de Configuracion {conf.Titulo}", 0));

                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, $"{TBita}, {txt}",
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error NO se creo el nuevo registro de configuracion {conf.Titulo}    ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, No se creo un nuevo folio " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogAll(logTemp);

                await ZconfigGrid!.Reload();

            }

        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible crear un FOLIO, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogAll(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}

