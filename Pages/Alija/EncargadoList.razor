@inherits EncargadoListBase
@inject NotificationService NS
@using DashBoard.Modelos

@if (LosEncargados != null && !Leyendo)
{
    <RadzenDataGrid @ref="EncargadoGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosEncargados" TItem="Z204_Empleado"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4 && EmpresaActiva.OrgId.Length > 30)
            {
                <RadzenButton Icon="plus" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Info" Click="InsertRow">
                    Agregar encargado
                </RadzenButton>
            }
            else if (EmpresaActiva.OrgId.Length < 30)
            {
                <RadzenLabel>Es necesario que seleciones una empresa activa en Informacion>Empresa Activa</RadzenLabel>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="LeerEncargados">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <Columns>


            <RadzenDataGridColumn TItem="Z204_Empleado" Title="Id" Filterable="false"
                                  Width="40px">
                <Template Context="datos">
                    <RadzenLabel>@(LosEncargados.IndexOf(datos) + 1)</RadzenLabel>

                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z204_Empleado" Title="Encargado"
                                  Filterable="true" Width="250px">
                <Template Context="datos">
                    <radzenlabel>@datos.Nombre</radzenlabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Transportista" @bind-Value="datos.Nombre" Style="width: 100%" /> <br>
                    <RadzenLengthValidator Component="Transportista" Min="1" Max="75"
                                           Text="El nombre del encargado de la operacion es requerido" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z204_Empleado" Title="Comentarios"
                                  Filterable="false" Resizable="true" Width="250px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Obs
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Obs" @bind-Value="datos.Obs" Style="width: 100%" /> <br>
                    
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z204_Empleado" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (datos.Estado > 3)
                    {
                        <label></label>
                    }
                    else
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado == 2 && ElUser.Nivel > 4)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">

    </div>
}

@code {


    void Cancelar()
    {
        //OrgNew = new();
        EncargadoToInsert = new();
    }

    Z204_Empleado EncargadoToInsert = new();

    async Task EditRow(Z204_Empleado encargado)
    {

        await EncargadoGrid!.EditRow(encargado);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z204_Empleado encargado)
    {
        try
        {
            if (encargado == EncargadoToInsert) EncargadoToInsert = null!;


            Editando = !Editando;
            ApiRespuesta<Z204_Empleado> resultado = await Servicio("Update", encargado);

            string txt = $"{TBita}, Folio: {ElFolio.FolioNum} encargado: {encargado.Nombre}, {encargado.Obs}";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info de FOLIO {ElFolio.FolioNum} {encargado.Nombre}", 0));
                txt = $"Se actualizo la informacion " + txt;
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error No Se actualizo la info de ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"Error, No se actualizo un registro de Encargado {txt} {etxt}";

                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible actualizar la info de ENCARGADO, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }

    }

    async Task SaveRow(Z204_Empleado encargado)
    {
        await EncargadoGrid!.UpdateRow(encargado);
    }

    void CancelEdit(Z204_Empleado encargado)
    {
        if (encargado == EncargadoToInsert) EncargadoToInsert = null!;

        Editando = !Editando;
        EncargadoGrid!.CancelEditRow(encargado);
    }

    async Task InsertRow()
    {
        EncargadoToInsert = new Z204_Empleado();
        EncargadoToInsert.FolioId = ElFolio.FolioId;
        EncargadoToInsert.Estado = 1;
        Editando = !Editando;
        await EncargadoGrid!.InsertRow(EncargadoToInsert);

    }
    async void OnCreateRow(Z204_Empleado encargado)
    {
        try
        {
            if (encargado == EncargadoToInsert) EncargadoToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z204_Empleado> resultado = await Servicio("Insert", encargado);

            string txt = $"Se creo un nuevo registro de encargado para folio: {ElFolio.FolioNum}";
            txt += $"empleado: {encargado.Nombre} {encargado.Obs}, Estado: Nuevo, Estatus: Activo";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("Exito", "Nuevo Encargado",
                    $"Se creo un nuevo registro de Encargado FOLIO {ElFolio.FolioNum} Encargado: {encargado.Nombre}", 0));

                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error NO se creo el nuevo registro de Encargado ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, Error, No se creo un nuevo registro de encargado " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
            //await EncargadoGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible crear el registro de un encargado, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}
