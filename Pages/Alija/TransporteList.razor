
@inherits TransporteListBase
@inject NotificationService NS
@using DashBoard.Modelos

@if (LosTrans != null && !Leyendo)
{
    <RadzenDataGrid @ref="TransGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosTrans" TItem="Z203_Transporte"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4 && EmpresaActiva.OrgId.Length > 30)
            {
                <RadzenButton Icon="plus" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Info" Click="InsertRow">
                    Agregar Transportista
                </RadzenButton>
            }
            else if (EmpresaActiva.OrgId.Length < 30)
            {
                <RadzenLabel>Es necesario que seleciones una empresa activa en Informacion>Empresa Activa</RadzenLabel>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="LeerTransportistas">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <Columns>


            <RadzenDataGridColumn TItem="Z203_Transporte" Title="Id" Filterable="false"
                                  Width="40px">
                <Template Context="datos">
                    <RadzenLabel>@(LosTrans.IndexOf(datos) + 1)</RadzenLabel>

                </Template>
                
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z203_Transporte" Title="Transportista"
                                  Filterable="true" Width="200px">
                <Template Context="datos">
                    <radzenlabel>@datos.Transportista</radzenlabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Transportista" @bind-Value="datos.Transportista" Style="width: 100%" /> <br>
                    <RadzenLengthValidator Component="Transportista" Min="1" Max="75"
                                           Text="El nombre de la empresa transportista es requerido" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z203_Transporte" Title="Nombre del Chofer"
                                  Filterable="false" Resizable="true" Width="200px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Chofer
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Chofer" @bind-Value="datos.Chofer" Style="width: 100%" /> <br>
                    <RadzenLengthValidator Component="Transportista" Min="1" Max="75"
                                           Text="El nombre del chofer es requerido" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z203_Transporte" Title="Carta Porte"
                                  Filterable="false" Resizable="true" Width="170px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.CartaPorte
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="CartaPorte" @bind-Value="datos.CartaPorte" Placeholder="Carta Porte" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z203_Transporte" Title="Identificacion" 
                                  Filterable="false" Resizable="true" Width="200px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Identificacion
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Identificacion" @bind-Value="datos.Identificacion"
                                    Placeholder="Identificacion"/>
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z203_Transporte" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (datos.Estado > 3)
                    {
                        <label></label>
                    }
                    else
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado == 2 && ElUser.Nivel > 4)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        
    </div>
}

@code {


    void Cancelar()
    {
        //OrgNew = new();
        TransToInsert = new();
    }

    Z203_Transporte TransToInsert = new();

    async Task EditRow(Z203_Transporte trans)
    {

        await TransGrid!.EditRow(trans);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z203_Transporte trans)
    {
        try
        {
            if (trans == TransToInsert) TransToInsert = null!;


            Editando = !Editando;
            ApiRespuesta<Z203_Transporte> resultado = await Servicio("Update", trans);

            string txt = $"{TBita}, Folio: {ElFolio.FolioNum} empresa transportista: {trans.Transportista},";
            txt += $"Chofer: {trans.Chofer} {trans.Identificacion}, carta porte: {trans.CartaPorte}";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info de Folio {ElFolio.FolioNum} {trans.Transportista}", 0));
                txt = $"Se actualizo la informacion " + txt;
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error No Se actualizo la info de ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"Error, No se actualizo un registro de Transportista {txt} {etxt}";
                
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible actualizar la info de Transportista, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }

    }

    async Task SaveRow(Z203_Transporte trans)
    {
        await TransGrid!.UpdateRow(trans);
    }

    void CancelEdit(Z203_Transporte trans)
    {
        if (trans == TransToInsert) TransToInsert = null!;
        
        Editando = !Editando;
        TransGrid!.CancelEditRow(trans);
    }

    async Task InsertRow()
    {
        TransToInsert = new Z203_Transporte();
        TransToInsert.FolioId = ElFolio.FolioId;
        TransToInsert.Estado = 1;
        Editando = !Editando;
        await TransGrid!.InsertRow(TransToInsert);

    }
    async void OnCreateRow(Z203_Transporte trans)
    {
        try
        {
            if (trans == TransToInsert) TransToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z203_Transporte> resultado = await Servicio("Insert", trans);

            string txt = $"Se creo un nuevo registro de transportista para folio: {ElFolio.FolioNum}";
            txt += $"empresa transportista: {trans.Transportista} chofer: {trans.Chofer} Id: {trans.Identificacion}";
            txt += $"carta porte: {trans.Chofer} Estado: Nuevo, Estatus: Activo";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("Exito", "Nuevo Transportista",
                    $"Se creo un nuevo registro de transportista {trans.Transportista} chofer: {trans.Chofer}", 0));

                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error NO se creo el nuevo registro de Transportista ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, Error, No se creo un nuevo registro de Transportista " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
            //await TransGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible crear el registro de un transportista, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}