@inherits PreciosListBase
@inject NotificationService NS
@using DashBoard.Modelos


@if (LosProductos != null && !Leyendo)
{
    <RadzenDataGrid @ref="ProductoGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosProductos" TItem="Z280_Producto"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            
            <RadzenButton Icon="plus" style="margin-bottom: 10px"
                            ButtonStyle="ButtonStyle.Info" Click="InsertRow">
                Nuevo Producto
            </RadzenButton>
            
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="LeerProductos">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <Columns>


            <RadzenDataGridColumn TItem="Z280_Producto" Title="Id" Filterable="false"
                                  Width="40px">
                <Template Context="datos">
                    <RadzenLabel>@(LosProductos.IndexOf(datos) + 1)</RadzenLabel>

                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Grupo" Property="Grupo"
                                  Filterable="true" Width="150px">
                <Template Context="datos">
                    <RadzenLabel>@datos.Grupo</RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Grupo" @bind-Value="datos.Grupo"
                                   Placeholder="Grupo" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Tipo" Property="Tipo"
                                  Filterable="true" Width="120px">
                <Template Context="datos">
                    <RadzenLabel>@datos.Tipo</RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Tipo" Data=PreciosTipo @bind-Value=@datos.Tipo
                                    ValueProperty="Key" TextProperty="Value"
                                    Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Clave" Property="Clave"
                                  Filterable="true" Width="120px">

                <Template Context="datos">
                    <RadzenLabel>@datos.Clave</RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Clave" @bind-Value="datos.Clave"
                                   Placeholder="Clave" Style="width: 100%;" MaxLength="10" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Descripcion del Producto"
                                  Filterable="true" Width="250px" Property="Titulo">
                <Template Context="datos">
                    <RadzenLabel>@datos.Titulo</RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Titulo" @bind-Value="datos.Titulo"
                                   Placeholder="Nombre del producto" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Precio" Property="Precio"
                                  Filterable="false" Resizable="true" Width="100px">

                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", datos.Precio)}")

                        </RadzenLabel>
                    </div>
                </Template>

                <EditTemplate Context="datos">
                    <div style="text-align: right;">
                        <RadzenNumeric Name="Precio" @bind-Value="datos.Precio"
                                       ShowUpDown="false" style="text-align: right;" Min="0" Max="99999" />
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="IVA" Property="TasaIVA"
                                  Filterable="false" Resizable="true" Width="100px">

                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @($"{(datos.TasaIVA/100).ToString("P0", System.Globalization.CultureInfo.InvariantCulture)}")
                            
                        </RadzenLabel>
                    </div>
                </Template>

                <EditTemplate Context="datos">
                    <div style="text-align: right;">
                        <RadzenNumeric Name="TasaIVA" @bind-Value="datos.TasaIVA"
                                       ShowUpDown="true" style="text-align: right;" Min="0" Max="100" />
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z280_Producto" Title="Comentarios"
                                  Filterable="false" Resizable="true" Width="200px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Obs
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Obs" @bind-Value="datos.Obs" Placeholder="Comentarios" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z280_Producto" Title="Aplica para:"
                                  Filterable="false" Resizable="true" Width="200px">

                <Template Context="datos">
                    @if (datos.Corporativo == "All")
                    {
                        <RadzenLabel>Todos los clientes</RadzenLabel>
                    }
                    else if (@LasOrgs.Any(x => x.OrgId == datos.Corporativo))
                    {
                        <div style="white-space:pre-wrap; line-height: initial">
                            <RadzenLabel>@($"Solo para los clientes {@LasOrgs.FirstOrDefault(x=>x.OrgId == datos.Corporativo)!.Comercial}") </RadzenLabel>

                        </div>
                    }
                    else
                    {
                        <RadzenLabel>No hay Empresa!</RadzenLabel>
                    }
                </Template>

                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Corporativo" Data=LosCorps @bind-Value=@datos.Corporativo
                                    ValueProperty="OrgId" TextProperty="Comercial"
                                    Style="width: 90%;" />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z280_Producto" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (datos.Estado > 3)
                    {
                        <label></label>
                    }
                    else
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado == 2 && ElUser.Nivel > 4)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">

    </div>
}

@code {


    void Cancelar()
    {
        //OrgNew = new();
        ProductoToInsert = new();
    }

    Z280_Producto ProductoToInsert = new()    ;

    async Task EditRow(Z280_Producto producto)
    {

        await ProductoGrid!.EditRow(producto);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z280_Producto producto)
    {
        try
        {
            if (producto == ProductoToInsert) ProductoToInsert = null!;


            Editando = !Editando;
            ApiRespuesta<Z280_Producto> resultado = await Servicio(ServiciosTipos.Update, producto);

            string txt = $"{TBita}, Clave: {producto.Clave} Producto: {producto.Titulo},";
            txt += $"Grupo: {producto.Grupo} Tipo: {producto.Tipo}, precio: {producto.Precio}, ";
            txt += string.IsNullOrEmpty(producto.Obs) ? "" : $"Comentarios: {producto.Obs}";
            txt += producto.Corporativo == "All" ? "General todos los clientes" :
                $"Solo para los clientes de: {LasOrgs.FirstOrDefault(x => x.OrgId == producto.Corporativo)!.Comercial}";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info del PRODUCTO {producto.Titulo} {producto.Precio}", 0));
                txt = $"Se actualizo la informacion " + txt;
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
                
            }
            else
            {
                string etxt = $"Error No Se actualizo la info de ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"Error, No se actualizo un registro del PRODUCTO {txt} {etxt}";

                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogAll(logTemp);
            }
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible actualizar la info de PRODUCTO, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogAll(logTemp);
        }

    }

    async Task SaveRow(Z280_Producto producto)
    {
        await ProductoGrid!.UpdateRow(producto);
    }

    void CancelEdit(Z280_Producto producto)
    {
        if (producto == ProductoToInsert) ProductoToInsert = null!;

        Editando = !Editando;
        ProductoGrid!.CancelEditRow(producto);
    }

    async Task InsertRow()
    {
        ProductoToInsert = new Z280_Producto()
        {
            Grupo = "General",
            Tipo = "Uno",
            Corporativo = "All",
            Estado = 1
        };
        Editando = !Editando;
        await ProductoGrid!.InsertRow(ProductoToInsert);

    }
    async void OnCreateRow(Z280_Producto producto)
    {
        try
        {
            if (producto == ProductoToInsert) ProductoToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z280_Producto> resultado = await Servicio(ServiciosTipos.Insert, producto);

            string txt = $"{TBita}, Clave: {producto.Clave} Producto: {producto.Titulo},";
            txt += $"Grupo: {producto.Grupo} Tipo: {producto.Tipo}, precio: {producto.Precio}, ";
            txt += string.IsNullOrEmpty(producto.Obs) ? "" : $"Comentarios: {producto.Obs}";
            txt += producto.Corporativo == "All" ? "General todos los clientes" :
                $"Solo para los clientes de: {LasOrgs.FirstOrDefault(x => x.OrgId == producto.Corporativo)!.Comercial}";
            txt += "Estado: Nuevo, Estatus: Activo";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("Exito", "Nuevo PRODUCTO",
                    $"Se creo un nuevo registro de PRODUCTO: {producto.Clave} producto: {producto.Titulo} {producto.Precio}", 0));

                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error NO se creo el nuevo registro de PRODUCTO ";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, Error, No se creo un nuevo registro de PRODUCTO " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogAll(logTemp);
            }
            //await ProductoGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible crear el registro PRODUCTO, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogAll(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

    }

