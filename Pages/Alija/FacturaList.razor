
@inherits FacturaListBase
@inject NotificationService NS
@using DashBoard.Modelos


@if (LasFacturas != null && !Leyendo)
{
    <RadzenDataGrid @ref="FacturaGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LasFacturas" TItem="Z220_Factura"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4 && EmpresaActiva.OrgId.Length > 30)
            {
                <RadzenButton Icon="plus" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Info" Click="InsertRow">
                    Nueva factura
                </RadzenButton>
            }
            else if (EmpresaActiva.OrgId.Length < 30)
            {
                <RadzenLabel>Es necesario que seleciones una empresa activa en Informacion>Empresa Activa</RadzenLabel>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="FiltroFacturacion">
                Actualizar
            </RadzenButton>

            <RadzenDropDown Name="ElCliente" Data=LosClientes @bind-Value=@ElCliente.OrgId
                            ValueProperty="OrgId" TextProperty="ComercialRfc"
                            Style="width: 100%;" Change="FiltroFacturacion"  />

            <div style="white-space:pre-wrap; line-height: initial">
                <RadzenLabel>
                    @FactEtiqueta
                </RadzenLabel>
            </div>
        </HeaderTemplate>

        <Template Context="datos1">
            <CascadingValue Value="datos1" Name="ElFolioAll">
                <CascadingValue Value="EmpresaActiva" Name="EmpresaActivaAll">

                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="Detalle">
                                <FactDetList ReadLosFolios="LeerFolios" LosFoliosAll="LosFolios" />
                            </RadzenTabsItem>

                            <RadzenTabsItem Text="Pagos">
                                TBD
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Archivos">
                                TBD
                            </RadzenTabsItem>

                        </Tabs>
                    </RadzenTabs>
                </CascadingValue>
            </CascadingValue>
        </Template>
        <!-- AQUI EMPIEZA REPORTE-->

        <Columns>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Factura folio" Property="FacturaNum"
                                  Filterable="true" Width="150px">
                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @datos.FacturaNum
                        </RadzenLabel>
                    </div>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="FacturaNum" @bind-Value="datos.FacturaNum" Change="ElTitulo"
                                   Placeholder="Folio Factura" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Fecha" Filterable="true" Property="Fecha"
                                  Width="150px">
                <Template Context="datos">
                    <RadzenLabel>@($"{@MyFunc.FormatoFecha("DD/MMM/AA", datos.Fecha)}")</RadzenLabel>

                </Template>
                <EditTemplate Context="datos">
                    <RadzenDatePicker Name="Fecha" @bind-Value="datos.Fecha" ShowTime="false"
                                      DateFormat="dd/MM/yyyy" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z220_Factura" Title="Cliente"
                                  Filterable="false" Resizable="true" Width="250px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @if (LasOrgs.Any(x => x.OrgId == datos.OrgId))
                        {
                            <RadzenLabel>
                                @LasOrgs.FirstOrDefault(X => X.OrgId == datos.OrgId)!.ComercialRfc
                            </RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel>
                                Sin Cliente
                            </RadzenLabel>
                        }
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenDropDown Name="OrgId" Data=LosClientes @bind-Value=@datos.OrgId
                                    ValueProperty="OrgId" TextProperty="ComercialRfc"
                                    Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Importe" Property="Importe"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", datos.Importe)}")

                        </RadzenLabel>
                    </div>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenNumeric Name="Importe" @bind-Value="datos.Importe" ShowUpDown="false"
                                   Placeholder="Importe" Style="width:100%;text-align:right;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Estado" Property="Estado"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <div style="text-align: right;">
                        <RadzenLabel>
                            @if (FactEstadoArray.Length >= datos.Estado - 1)
                            {
                                <RadzenLabel>
                                    @FactEstadoArray[datos.Estado - 1]
                                </RadzenLabel>
                            }
                            else
                            {
                                <RadzenLabel>
                                    Error
                                </RadzenLabel>
                            }
                        </RadzenLabel>
                    </div>
                </Template>

                <EditTemplate Context="datos">
                    @if (datos.Estado == 0)
                    {
                        <RadzenLabel>Nueva</RadzenLabel>
                    }
                    else
                    {
                        <RadzenDropDown Name="Estado" Data=LosEdos @bind-Value=@datos.Estado
                                        ValueProperty="Key" TextProperty="Value"
                                        Style="width: 100%;" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Titulo" Property="Titulo"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Titulo
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Titulo" @bind-Value="datos.Titulo"
                                   Placeholder="Titulo" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Title="Comentario" Property="obs"
                                  Filterable="true" Resizable="true" Width="200px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.Obs
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Obs" @bind-Value="datos.Obs"
                                    Placeholder="Comentarios" Style="width: 100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z220_Factura" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (ElUser.Nivel > 5 || datos.Estado < 2)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />
                    }
                    @if (datos.Status)
                    {
                        <RadzenLabel>Activo</RadzenLabel>
                    }
                    else
                    {
                        <RadzenLabel>Suspendido</RadzenLabel>
                    }
                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado < 2 && ElUser.Nivel > 4)
                    {
                        <RadzenLabel>
                            Borrar este registro?
                        </RadzenLabel>
                        <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                         Placeholder="Borrar este registro?">
                            <Items>
                                <RadzenSelectBarItem Text="No" Value="true" />
                                <RadzenSelectBarItem Text="Si" Value="false" />
                            </Items>
                        </RadzenSelectBar>

                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        
    </div>
}

@code {


    void Cancelar()
    {
        //OrgNew = new();
        FacturaToInsert = new();
    }

    async void FiltroFacturacion()
    {
        FiltroFactura nf = new()
        {
            Datos =true,
            EmpresaId = EmpresaActiva.OrgId
        };

        if (ElCliente != null && ElCliente!.OrgId.Length > 30)
        {
            nf.OrgId = ElCliente.OrgId;
        }

        await ReadLasFacturasAll.InvokeAsync(nf);
    }

    void ElTitulo()
    {
        if (string.IsNullOrEmpty(FacturaToInsert.Titulo))
            FacturaToInsert.Titulo = FacturaToInsert.FacturaNum;
    }


    Z220_Factura FacturaToInsert = new();


    async Task EditRow(Z220_Factura fact)
    {
        await FacturaGrid!.EditRow(fact);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z220_Factura fact)
    {
        try
        {
            if (fact == FacturaToInsert) FacturaToInsert = null!;

            string emp = LasOrgs.Any(x => x.OrgId == fact.OrgId) ?
                LasOrgs.FirstOrDefault(x => x.OrgId == fact.OrgId)!.Comercial :
                "";
            string txt = $"Factura: {fact.FacturaNum}, fecha: {fact.Fecha}, Titulo:{fact.Titulo} ";
            txt += string.IsNullOrEmpty(fact.Obs) ? "" : emp;
            txt += string.IsNullOrEmpty(emp) ? "" : $"Cliente: {emp}";
            txt += $"importe: {fact.Importe}, Estado: {FactEstadoArray[fact.Estado - 1]} Estatus:";
            txt += fact.Status ? "Activo" : "Suspendido";

            Editando = !Editando;
            ApiRespuesta<Z220_Factura> resultado = await Servicio("Update", fact);

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info de FACTURA {fact.FacturaNum} Titulo:{fact.Titulo}", 0));
                txt = $"Se actualizo la factura en la pagina {TBita}, " + txt;
                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error No Se actualizo la FACTURA de {fact.FacturaNum} {fact.Titulo}";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, No se actualizo un registro " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
            //await FacturaGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible actualizar el FACTURA, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }
    }

    async Task SaveRow(Z220_Factura fact)
    {
        if (fact.Estado == 2)
        {
            bool avanzar = await SigEdoFactura(fact);
            if (!avanzar)
            {
                string txt = "No fue posible modificar el registro ";
                txt += "La FACTURA no cuenta con la informacion de FOLIOS a cobrar, ";
                ShowNotification(ElMsn("Error", "Error", txt, 4000));
                FacturaGrid!.CancelEditRow(fact);
                return;
            }
        }
        await FacturaGrid!.UpdateRow(fact);
    }

    void CancelEdit(Z220_Factura fact)
    {
        if (fact == FacturaToInsert) FacturaToInsert = null!;

        Editando = !Editando;
        FacturaGrid!.CancelEditRow(fact);
    }

    async Task InsertRow()
    {
        FacturaToInsert = new Z220_Factura();

        FacturaToInsert.Estado = 0;
        Editando = !Editando;
        await FacturaGrid!.InsertRow(FacturaToInsert);

    }
    async void OnCreateRow(Z220_Factura fact)
    {
        try
        {
            if (fact == FacturaToInsert) FacturaToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z220_Factura> resultado = await Servicio("Insert", fact);

            string emp = LasOrgs.Any(x => x.OrgId == fact.OrgId) ? LasOrgs.FirstOrDefault(x => x.OrgId == fact.OrgId)!.Comercial :
                "";
            string txt = $"Factura: {fact.FacturaNum}, fecha: {fact.Fecha}, Titulo:{fact.Titulo} ";
            txt += string.IsNullOrEmpty(fact.Obs) ? "" : emp;
            txt += string.IsNullOrEmpty(emp) ? "" : $"Cliente: {emp}";
            txt += $"importe: {fact.Importe}, Estado: {FactEstadoArray[fact.Estado - 1]} Estatus:";
            txt += fact.Status ? "Activo" : "Suspendido";

            if (resultado.Exito)
            {
                ShowNotification(ElMsn("Exito", "Nueva factura",
                    $"Se creo un nueva factura {fact.FacturaNum} {fact.Titulo}", 0));

                Z190_Bitacora bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, $"{TBita}, {txt}",
                    Corporativo, ElUser.OrgId);
                await BitacoraAll(bitaTemp);
            }
            else
            {
                string etxt = $"Error NO se creo el nuevo factura {fact.FacturaNum} {fact.Titulo}";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 0));
                txt = $"{TBita}, No se creo un nueva factura " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId, txt,
                    Corporativo, ElUser.OrgId);
                await LogRepo.Insert(logTemp);
            }
            //await FacturaGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logTemp = MyFunc.MakeLog(ElUser.UserId, ElUser.OrgId,
                    $"Error, No fue posible crear un FACTURA, {TBita}, {ex}",
                    Corporativo, ElUser.OrgId);
            await LogRepo.Insert(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}
